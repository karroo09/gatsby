const nodes = [
  {
    array: [1, 2, 3],
    arrayOfFunctions: [() => {}],
    arrayOfNumbers: [1],
    bigInt: 1,
    bool: false,
    date: `2018-01-01T00:00:00.000Z`,
    dates: [new Date(`2018-01-01`)],
    emptyArray: [],
    emptyObject: {},
    float: 1,
    function: () => {},
    int: 0,
    invalidDate: `Invalid Date`,
    invalidDates: [new Date(`2018-01-01`), `Invalid Date`],
    nestedArrays: [[1, 2, 3], [4, 5, 6]],
    number: 0.1,
    null: null,
    objectsInArray: [{ foo: true }, { bar: 1 }],
    object: {
      array: [1, 2, 3],
      date: `2018-01-01T00:00:00.000Z`,
      emptyArray: [],
      int: 1,
      nestedObject: null,
      string: `Baz qux`,
    },
    polymorphic: { foo: null },
    polymorphicArray: { foo: [[`foo`, `bar`]] },
    polymorphicWithNull: { foo: null },
    polymorphicArrayWithNull: { foo: [{ bar: true }] },
    string: null,
  },
  {
    arrayOfNumbers: [1, 0.2, 3],
    bigInt: 1e10,
    date: new Date(`2018-01-01`),
    dates: [`2018-01-01T00:00:00.000Z`],
    emptyArray: [undefined, null],
    float: 0.1,
    invalidDate: new Date(`2018-01-01`),
    invalidDates: [`2018-01-01T00:00:00.000Z`],
    nestedArrays: [[1, 2, 3]],
    number: 1,
    objectsInArray: [{ baz: `qux` }],
    object: {
      bool: true,
      date: `2018-01-01T00:00:00.000Z`,
      int: 1,
      nestedObject: {
        bool: true,
      },
      string: `Baz qux`,
    },
    polymorphic: { foo: [1] },
    polymorphicArray: { foo: [{ bar: 1 }] },
    polymorphicWithNull: { foo: { bar: true } },
    polymorphicArrayWithNull: { foo: null },
    string: `Foo bar`,
    stringObject: new String(`Foo bar`),
  },
  {
    array: [],
    polymorphic: { foo: { bar: true } },
    polymorphicWithNull: { foo: { baz: true } },
    polymorphicArrayWithNull: {
      foo: [{ baz: true }, { bar: false, qux: false }],
    },
    string: `Baz qux`,
    stringObject: `Baz qux`,
  },
  {
    object: {
      nestedObject: {
        bool: false,
        string: `Foo bar`,
      },
    },
  },
]

module.exports = { nodes }
